# üß≠ AI-Capital Production Hardening Plan
**Goal:** elevate the app from MVP ‚Üí production-grade with paid-tier readiness  
**Duration:** ~1 week sprint  
**Owner:** Core Dev Team (Backend, Frontend, DevOps)

---

## 1Ô∏è‚É£ SECURITY & MIDDLEWARE (`backend/src/app.ts`)
- [x] Install `helmet`, `express-rate-limit`, `cors`, `cookie-parser` ‚úÖ
- [x] Add `helmet()` for HTTP header protection ‚úÖ
- [x] Apply `rateLimit()` ‚Üí 300 req/minute ‚úÖ
- [x] Restrict CORS origins to vercel frontend URL + admin dashboard domain ‚úÖ
- [x] Enable `credentials: true` ‚úÖ
- [ ] Implement CSRF protection (double submit or `csurf`) - TODO
- [x] Set cookies: `httpOnly`, `sameSite=Lax`, `secure` in production ‚úÖ
- [x] Add centralized error handler middleware (logs + JSON output) ‚úÖ

---

## 2Ô∏è‚É£ REQUEST VALIDATION (`backend/src/middleware/validate.ts`)
- [x] Install `zod` ‚úÖ
- [x] Create `validate(schema)` middleware ‚úÖ
- [x] Define request schemas in `backend/src/schemas/*` ‚úÖ
- [x] Apply validation to all API routes (auth, onboarding, portfolio) ‚úÖ
- [x] Reject invalid symbols / missing params before controller logic ‚úÖ

---

## 3Ô∏è‚É£ DATA & INDEX OPTIMIZATION (`backend/src/models`)
- [x] Add MongoDB indexes: ‚úÖ
      - users: `{ email: 1 } unique` ‚úÖ
      - portfolios: `{ userId: 1, type: 1 }` ‚úÖ
      - historicaldata: `{ symbol: 1, date: -1 }` ‚úÖ
      - watchlist: `{ userId: 1, ticker: 1 }` ‚úÖ
- [ ] Add pre-save hook to enforce stock limit per plan - TODO
- [x] Run `Model.ensureIndexes()` on startup ‚úÖ
- [ ] Benchmark heavy queries with `.explain()` - TODO

---

## 4Ô∏è‚É£ MARKET-DATA SERVICE (`backend/src/services/stockDataService.ts`)
- [x] Install `lru-cache` ‚úÖ
- [x] Implement symbol-scoped LRU cache (max 1000, ttl 10min) ‚úÖ
- [x] Add retry/backoff logic with 12 API keys and aggressive retries ‚úÖ
- [x] Build provider fallback chain: [AlphaVantage x4, Finnhub x4, FMP x4] ‚úÖ
- [x] Add smart key rotation and blacklisting ‚úÖ
- [x] Cache historical data with 10-minute TTL ‚úÖ
- [x] Log provider latency and cache hit rate ‚úÖ

---

## 5Ô∏è‚É£ CRON & JOB STABILITY (`backend/src/services/schedulerService.ts`)
- [ ] Install and connect `redis` (`REDIS_URL`)
- [ ] Implement distributed lock (SET NX PX)
- [ ] Wrap cron jobs with `withLock()` helper
- [ ] Upsert by `(portfolioId, symbol, date)` to prevent duplicates
- [ ] Add job logs: "Skipped run ‚Äì lock held"
- [ ] Gracefully handle provider downtime (retry next cycle)

---

## 6Ô∏è‚É£ HEALTH & LOGGING
- [x] Install `pino` + `pino-http` ‚úÖ
- [x] Add `requestId` middleware (uuid) ‚úÖ
- [x] Log method, path, duration, and requestId ‚úÖ
- [x] Implement `/healthz` endpoint returning `{ status, uptime }` ‚úÖ
- [x] Configure Render health check to `/healthz` ‚úÖ
- [x] Integrate Sentry transport ‚úÖ

---

## 7Ô∏è‚É£ FRONTEND API CONSOLIDATION (`frontend/lib/api.ts`)
- [ ] Create centralized `api.ts` for all fetch requests
- [ ] Add Zod validation for responses
- [ ] Unify error handling (map status ‚Üí toast)
- [ ] Use SWR/React-Query for caching
- [ ] Apply consistent base URL from env
- [ ] Add type-safe DTOs for each API call

---

## 8Ô∏è‚É£ FRONTEND UX POLISH
- [ ] Add tooltips for "This month %" vs "Last month %"
- [ ] Display "Last updated: ‚Ä¶" under market indices
- [ ] Add plan-based feature flags (Free / Premium / Premium+)
- [ ] Use unified number formatters (currency, percent)
- [ ] Add skeleton loaders for async sections
- [ ] Confirm full mobile responsiveness on major screens

---

## 9Ô∏è‚É£ TESTING INFRASTRUCTURE
- [ ] Install `jest`, `supertest`, `ts-jest`
- [ ] Unit tests:
      - [ ] DecisionEngine scoring
      - [ ] StockDataService fallback chain
      - [ ] Portfolio limit enforcement
- [ ] Integration tests:
      - [ ] Auth ‚Üí onboarding ‚Üí portfolio add ‚Üí decision fetch
- [ ] E2E tests with Playwright:
      - [ ] login ‚Üí add stock ‚Üí see decision
- [ ] Add `"test": "jest"` to package.json
- [ ] Configure CI to run tests before deploy

---

## üîü DEVOPS & ENVIRONMENT
- [ ] Convert Dockerfile to multi-stage build (build ‚Üí run)
- [ ] Ensure `NODE_ENV=production` and `npm ci --omit=dev`
- [ ] Add `.env.example` with all required vars (no secrets)
- [ ] Update `docker-compose.yml` to reference `.env`
- [ ] Add Render health checks and env var docs
- [ ] Enable auto-deploy triggers from GitHub main branch
- [ ] Stream Pino logs to Sentry or Logtail

---

## 1Ô∏è‚É£1Ô∏è‚É£ DOCUMENTATION (`/docs`)
- [ ] `Architecture.md` ‚Äì overview + diagram
- [ ] `DataProviders.md` ‚Äì API sources + fallback logic
- [ ] `DecisionEngine.md` ‚Äì weights, signals, risk scoring
- [ ] `Runbook.md` ‚Äì deploy & troubleshooting
- [ ] Update root `README.md` with production setup + paid tiers

---

## 1Ô∏è‚É£2Ô∏è‚É£ DEPLOY VALIDATION CHECKLIST
- [ ] All env vars configured on Render + Vercel
- [ ] Redis lock tested successfully
- [ ] `/healthz` returns ok in Render dashboard
- [ ] Rate limiter verified (no 429s under load)
- [ ] Sentry receiving backend error events
- [ ] Test Premium user limit enforcement (3 portfolios √ó 15 stocks)
- [ ] Run end-to-end smoke test on live deployment

---

‚úÖ **After this checklist:**
- Security hardened  
- Jobs idempotent  
- API validated & cached  
- UX reliable  
- Tests automated  
- Ops observable  
‚Üí App officially *production-ready for paid users.*
